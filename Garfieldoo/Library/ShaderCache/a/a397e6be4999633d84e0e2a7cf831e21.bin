readonly validationMessage: string;\n    /**\n      * Returns a  ValidityState object that represents the validity states of an element.\n      */\n    readonly validity: ValidityState;\n    /**\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\n      */\n    readonly willValidate: boolean;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Sets a custom error message that is displayed when a form is submitted.\n      * @param error Sets a custom error message that is displayed when a form is submitted.\n      */\n    setCustomValidity(error: string): void;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFieldSetElement: {\n    prototype: HTMLFieldSetElement;\n    new(): HTMLFieldSetElement;\n}\n\ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\n    /**\n      * Sets or retrieves the current typeface family.\n      */\n    face: string;\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFontElement: {\n    prototype: HTMLFontElement;\n    new(): HTMLFontElement;\n}\n\ninterface HTMLFormElement extends HTMLElement {\n    /**\n      * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\n      */\n    acceptCharset: string;\n    /**\n      * Sets or retrieves the URL to which the form content is sent for processing.\n      */\n    action: string;\n    /**\n      * Specifies whether autocomplete is applied to an editable text field.\n      */\n    autocomplete: string;\n    /**\n      * Retrieves a collection, in source order, of all controls in a given form.\n      */\n    readonly elements: HTMLCollection;\n    /**\n      * Sets or retrieves the MIME encoding for the form.\n      */\n    encoding: string;\n    /**\n      * Sets or retrieves the encoding type for the form.\n      */\n    enctype: string;\n    /**\n      * Sets or retrieves the number of objects in a collection.\n      */\n    readonly length: number;\n    /**\n      * Sets or retrieves how to send the form data to the server.\n      */\n    method: string;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    /**\n      * Designates a form that is not validated when submitted.\n      */\n    noValidate: boolean;\n    /**\n      * Sets or retrieves the window or frame at which to target content.\n      */\n    target: string;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Retrieves a form object or an objec